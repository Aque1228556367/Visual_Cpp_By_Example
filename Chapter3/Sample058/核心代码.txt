本例核心是通过重写CListBox::DrawItem()，实现选中后的不同效果
void NewListBox::DrawItem(LPDRAWITEMSTRUCT lpDrawItemStruct) 
{
	// TODO: Add your code to draw the specified item
	CDC dc;
	dc.Attach(lpDrawItemStruct->hDC);//获取列表框的DC
	CRect rect(lpDrawItemStruct->rcItem);//获取列表框的矩形区域
	COLORREF bk = dc.GetBkColor();//背景颜色
	COLORREF fg = dc.GetTextColor();//系统文本颜色
	if(lpDrawItemStruct->itemState & ODS_SELECTED)//该项被选中
	{
		bk =  RGB(180,180,0 );//背景颜色
		fg = RGB(255,0,0 );//红色文本
	}
	dc.SetTextColor(fg);
	CBrush brush(bk);
	dc.FillRect(&rect,&brush);
	if (lpDrawItemStruct->itemState&ODS_SELECTED)
	rect.left +=25;//缩进25个象素
	int nBkMode = dc.SetBkMode( TRANSPARENT );
	CString str;
	GetText(lpDrawItemStruct->itemID,str) ;
	dc.DrawText(str, &rect, DT_LEFT|DT_VCENTER);//显示文本
	dc.SetTextColor(fg);
	dc.SetBkMode( nBkMode );
	dc.Detach() ;	
}
//设置背景模式
CDC::SetBkMode( int nBkMode )
nBkMode：
TRANSPARENT	使用透明的输出，即文字的背景是不改变
OPAQUE		用当前背景的画刷的颜色输出显示文字的背景